# AutoPWN Development Docker Compose Configuration
# Optimized for local development with hot reload and debugging support
#
# Usage:
#   docker-compose -f docker-compose.dev.yml up -d          # Start core services
#   docker-compose -f docker-compose.dev.yml --profile tools up -d  # Include GUI tools
#   docker-compose -f docker-compose.dev.yml down -v        # Clean shutdown

# Logging configuration for development
x-dev-logging: &dev-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

# Resource limits for development
x-dev-resources: &dev-resources
  limits:
    cpus: '2.0'
    memory: 1G
  reservations:
    cpus: '0.25'
    memory: 256M

services:
  # PostgreSQL Database (Development)
  postgres:
    image: postgres:16-alpine
    container_name: autopwn-postgres-dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-autopwn}
      POSTGRES_USER: ${POSTGRES_USER:-autopwn}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-autopwn123}
      POSTGRES_HOST_AUTH_METHOD: ${POSTGRES_AUTH_METHOD:-trust}
      # Development optimizations
      POSTGRES_SHARED_BUFFERS: "256MB"
      POSTGRES_EFFECTIVE_CACHE_SIZE: "1GB"
      POSTGRES_WORK_MEM: "16MB"
      POSTGRES_MAINTENANCE_WORK_MEM: "128MB"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
      - ./backups/postgres:/backups  # For local backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-autopwn} -d ${POSTGRES_DB:-autopwn}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    logging: *dev-logging
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    networks:
      - autopwn-network

  # Redis for BullMQ Queues and Rate Limiting (Development)
  redis:
    image: redis:7-alpine
    container_name: autopwn-redis-dev
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory ${REDIS_MAX_MEMORY:-512mb}
      --maxmemory-policy allkeys-lru
      --save 60 1000
      --tcp-backlog 511
      --timeout 300
      --tcp-keepalive 300
      --loglevel ${REDIS_LOG_LEVEL:-notice}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 5s
    logging: *dev-logging
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 768M
        reservations:
          cpus: '0.25'
          memory: 256M
    networks:
      - autopwn-network

  # Redis Commander (Optional - Redis GUI for development)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: autopwn-redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379
      HTTP_USER: ${REDIS_COMMANDER_USER:-admin}
      HTTP_PASSWORD: ${REDIS_COMMANDER_PASSWORD:-admin}
    ports:
      - "${REDIS_COMMANDER_PORT:-8081}:8081"
    depends_on:
      redis:
        condition: service_healthy
    logging: *dev-logging
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    networks:
      - autopwn-network
    profiles:
      - tools

  # PgAdmin (Optional - PostgreSQL GUI for development)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: autopwn-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@autopwn.local}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_LISTEN_PORT: 80
    ports:
      - "${PGADMIN_PORT:-8080}:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./backups/postgres:/backups:ro  # Access backups from pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    logging: *dev-logging
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    networks:
      - autopwn-network
    profiles:
      - tools

  # Mailhog (Optional - Email testing for development)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: autopwn-mailhog
    restart: unless-stopped
    ports:
      - "${MAILHOG_SMTP_PORT:-1025}:1025"  # SMTP server
      - "${MAILHOG_UI_PORT:-8025}:8025"    # Web UI
    logging: *dev-logging
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 32M
    networks:
      - autopwn-network
    profiles:
      - tools

volumes:
  # Persistent data volumes
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/redis
  pgadmin_data:
    driver: local

networks:
  autopwn-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: br-autopwn-dev

# Development Environment Configuration
#
# Quick Start:
#   1. Start core services: docker-compose -f docker-compose.dev.yml up -d
#   2. Run API locally: pnpm --filter @autopwn/api dev
#   3. Run Web locally: pnpm --filter @autopwn/web dev
#
# With Development Tools:
#   docker-compose -f docker-compose.dev.yml --profile tools up -d
#
# Available Tools (when using --profile tools):
#   - PgAdmin: http://localhost:8080 (PostgreSQL GUI)
#   - Redis Commander: http://localhost:8081 (Redis GUI)
#   - Mailhog: http://localhost:8025 (Email testing UI)
#
# Environment Variables (create .env.development):
#   POSTGRES_DB=autopwn
#   POSTGRES_USER=autopwn
#   POSTGRES_PASSWORD=autopwn123
#   POSTGRES_PORT=5432
#   REDIS_PORT=6379
#   REDIS_MAX_MEMORY=512mb
#   DATA_PATH=./data
#   PGADMIN_EMAIL=admin@autopwn.local
#   PGADMIN_PASSWORD=admin123
#
# Database Management:
#   - Migrate: pnpm --filter @autopwn/api db:migrate
#   - Seed: pnpm --filter @autopwn/api db:seed-superuser
#   - Studio: pnpm --filter @autopwn/api db:studio
#
# Tips:
#   - Use named volumes for data persistence
#   - All services have health checks
#   - Resource limits prevent runaway containers
#   - Use 'docker-compose logs -f [service]' to view logs