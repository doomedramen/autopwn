# ⚠️ SECURITY WARNING ⚠️
# Before starting, you MUST set the following environment variables:
# - POSTGRES_PASSWORD: Secure password for PostgreSQL (Required)
# - BETTER_AUTH_SECRET: Secure secret for authentication, min 32 chars (Required)
#
# Quick Start - Generate secrets and start:
#   POSTGRES_PASSWORD=$(openssl rand -base64 32) \
#   BETTER_AUTH_SECRET=$(openssl rand -base64 32) \
#   docker-compose -f docker-compose.cpu.yml up -d
#
# Or save to .env file:
#   cp .env.docker.example .env
#   echo "POSTGRES_PASSWORD=$(openssl rand -base64 32)" >> .env
#   echo "BETTER_AUTH_SECRET=$(openssl rand -base64 32)" >> .env
#   docker-compose -f docker-compose.cpu.yml up -d
#
# DO NOT commit secrets to version control!

services:
  postgres:
    image: postgres:15-alpine
    container_name: autopwn-postgres
    environment:
      - POSTGRES_DB=autopwn
      - POSTGRES_USER=autopwn
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:?POSTGRES_PASSWORD must be set - see docker-compose.cpu.yml header}
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U autopwn']
      interval: 10s
      timeout: 5s
      retries: 10

  app:
    image: ${DOCKER_IMAGE:-doomedramen/autopwn:latest-cpu}
    container_name: autopwn-app
    environment:
      - DATABASE_URL=postgresql://autopwn:${POSTGRES_PASSWORD}@postgres:5432/autopwn
      - BETTER_AUTH_SECRET=${BETTER_AUTH_SECRET:?BETTER_AUTH_SECRET must be set and min 32 chars - generate with: openssl rand -base64 32}
      - NODE_ENV=production
      - LOG_LEVEL=INFO
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
    volumes:
      - ./uploads_data:/app/uploads
      - ./jobs_data:/app/jobs
    ports:
      - '3000:3000'
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3000/api/auth/status']
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
