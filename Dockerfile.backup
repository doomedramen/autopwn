# AutoPWN Multi-service Dockerfile
# Supports development, test, and production builds

# Build stage with dependencies and caching
FROM node:20-alpine AS base
RUN apk add --no-cache \
    curl \
    dumb-init \
    postgresql-client \
    redis \
    pnpm

# Install pnpm globally
RUN npm install -g pnpm@10.4.1

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json pnpm-lock.yaml* ./
COPY packages/ui/package*.json ./packages/ui/
COPY packages/eslint-config/package*.json ./packages/eslint-config/
COPY packages/typescript-config/package*.json ./packages/typescript-config/
COPY apps/web/package*.json ./apps/web/
COPY apps/api/package*.json ./apps/api/

# Install dependencies with proper cache
RUN --mount=type=cache,target=/root/.npm,pattern=npm-cache,sharing=locked,id=npm-cache \
    --mount=type=cache,target=/root/.pnpm-store,pattern=store+metadata,sharing=locked,id=npm-store,persist \
    pnpm install --frozen-lockfile --prefer-frozen-lockfile

# Development target
FROM base AS development
ENV NODE_ENV=development

# Copy source code
COPY . .

# Build entire workspace
RUN pnpm build

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S apiuser -u 1001

# Switch to non-root user
USER apiuser

# Create upload directory
RUN mkdir -p /app/uploads && chown -R apiuser:nodejs /app/uploads

# Expose port
EXPOSE 3001

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:3001/health || exit 1

# Start development server with dumb-init
ENTRYPOINT ["dumb-init", "--"]
CMD ["pnpm", "dev"]

# Production build target
FROM base AS production
ENV NODE_ENV=production

# Install dependencies for production
RUN pnpm install --frozen-lockfile --prod

# Copy built application
COPY --from=development /app/dist ./dist
COPY --from=development /app/packages ./packages
COPY --from=development /app/apps/api/dist ./apps/api

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S apiuser -u 1001

# Create upload directory
RUN mkdir -p /app/uploads && chown -R apiuser:nodejs /app/uploads

# Switch to non-root user
USER apiuser

# Expose port
EXPOSE 3001

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:3001/health || exit 1

# Start production server with dumb-init
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "dist/index.js"]