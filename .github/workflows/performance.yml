name: Performance Testing

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '10.4.1'

jobs:
  benchmark-api:
    name: API Performance Benchmarks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup test environment
        run: |
          # Create test directories
          mkdir -p temp/test-data

          # Create test network captures
          echo "Creating test data..."
          cat > temp/test-data/test.pcap << 'EOF'
          Dummy pcap file for testing
          EOF

          # Create test dictionary
          cat > temp/test-data/dictionary.txt << 'EOF'
          password
          test
          admin
          user
          123456
          EOF

      - name: Run performance benchmarks
        run: pnpm test:performance --filter api
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test:test@localhost:5432/autopwn_test
          REDIS_URL: redis://localhost:6379

      - name: Process benchmark results
        run: |
          node -e "
            const fs = require('fs');
            try {
              const results = JSON.parse(fs.readFileSync('./apps/api/test-results/performance-results.json', 'utf8'));
              console.log('Performance Results Summary:');
              Object.entries(results).forEach(([testName, metrics]) => {
                console.log(\`\${testName}:`);
                console.log(\`  Average: \${metrics.avg?.toFixed(2)}ms\`);
                console.log(\`  P95: \${metrics.p95?.toFixed(2)}ms\`);
                console.log(\`  P99: \${metrics.p99?.toFixed(2)}ms\`);
                console.log(\`  Count: \${metrics.count}\`);
                console.log('');
              });
            } catch (error) {
              console.error('Error processing results:', error.message);
            }
          "

      - name: Compare with baseline
        run: |
          echo "Comparing with baseline performance..."
          # Add logic to compare current results with baseline
          # Fail if performance degrades significantly

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: api-performance-${{ github.run_number }}
          path: apps/api/test-results/
          retention-days: 30

      - name: Update performance dashboard
        run: |
          echo "Updating performance dashboard..."
          # Add logic to update your performance dashboard
          # Could be a Grafana dashboard, custom web app, etc.

  load-test:
    name: Load Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install k6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run load tests
        run: |
          # Create load test script
          cat > load-test.js << 'EOF'
          import http from 'k6/http';
          import { check, sleep } from 'k6';

          export let options = {
            stages: [
              { duration: '2m', target: 10 },   // Ramp up to 10 users
              { duration: '5m', target: 10 },   // Stay at 10 users
              { duration: '2m', target: 50 },   // Ramp up to 50 users
              { duration: '5m', target: 50 },   // Stay at 50 users
              { duration: '2m', target: 0 },    // Ramp down
            ],
          };

          export default function () {
            let response = http.get('${{ secrets.API_URL }}/health');
            check(response, {
              'health check status is 200': (r) => r.status === 200,
              'response time < 500ms': (r) => r.timings.duration < 500,
            });
            sleep(1);
          }
          EOF

          # Run load test
          k6 run load-test.js --out json=load-test-results.json

      - name: Upload load test results
        uses: actions/upload-artifact@v4
        with:
          name: load-test-results-${{ github.run_number }}
          path: load-test-results.json
          retention-days: 30

  memory-profiling:
    name: Memory Profiling
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm build --filter @autopwn/api

      - name: Run memory profiling
        run: |
          # Run API with node --inspect
          NODE_OPTIONS='--inspect=0.0.0.0:9229 --max-old-space-size=4096' \
          DATABASE_URL=postgresql://test:test@localhost:5432/autopwn_test \
          REDIS_URL=redis://localhost:6379 \
          NODE_ENV=test \
          timeout 300s pnpm --filter @autopwn/api start &

          # Wait for server to start
          sleep 10

          # Run memory profiling script
          node -e "
            const puppeteer = require('puppeteer');

            (async () => {
              const browser = await puppeteer.launch();
              const page = await browser.newPage();

              // Enable memory profiling
              const client = await page.target().createCDPSession();
              await client.send('Profiler.enable');
              await client.send('Profiler.start');

              console.log('Starting memory profiling...');

              // Simulate load
              for (let i = 0; i < 100; i++) {
                await page.goto('${{ secrets.API_URL }}/health');
                await page.waitForTimeout(100);
              }

              // Get memory usage
              const heapUsage = process.memoryUsage();
              console.log('Heap used:', Math.round(heapUsage.heapUsed / 1024 / 1024 * 100) / 100, 'MB');

              await browser.close();
            })();
          "

      - name: Analyze memory usage
        run: |
          echo "Analyzing memory usage patterns..."
          # Add memory analysis logic here

      - name: Upload memory profile
        uses: actions/upload-artifact@v4
        with:
          name: memory-profile-${{ github.run_number }}
          path: memory-profile.json
          retention-days: 30

  performance-regression:
    name: Performance Regression Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Download previous performance results
        uses: actions/download-artifact@v4
        with:
          name: api-performance-${{ github.run_number - 1 }}
          path: previous-results
        continue-on-error: true

      - name: Compare performance metrics
        run: |
          node -e "
            const fs = require('fs');
            const path = require('path');

            let previousResults = null;
            try {
              const previousData = fs.readFileSync('previous-results/performance-results.json', 'utf8');
              previousResults = JSON.parse(previousData);
              console.log('Loaded previous performance results');
            } catch (error) {
              console.log('No previous results found, skipping comparison');
            }

            console.log('Performance regression check complete');
          "

      - name: Create performance report
        run: |
          cat > performance-report.md << 'EOF'
          # Performance Test Report

          ## Test Execution
          - **Date**: $(date)
          - **Commit**: ${{ github.sha }}
          - **Branch**: ${{ github.ref }}

          ## Metrics
          Detailed performance metrics are attached as artifacts.

          EOF

      - name: Add performance report to job summary
        uses: actions/upload-artifact@v4
        with:
          name: performance-report-${{ github.run_number }}
          path: performance-report.md