name: Build, Test and Deploy to DockerHub

on:
  push:
    branches: [main, master]
    tags: ['v*.*.*']
  pull_request:
    branches: [main, master]

# Set workflow permissions for security and functionality
permissions:
  contents: read
  packages: write
  pull-requests: write
  security-events: write

env:
  REGISTRY: docker.io
  IMAGE_NAME: autopwn
  NODE_VERSION: '20'
  # Control which variants to build (comma-separated: cpu,nvidia,amd,intel)
  # Set to 'cpu' to only build CPU variant, or 'cpu,nvidia' for CPU+NVIDIA, etc.
  BUILD_VARIANTS: 'cpu'

jobs:
  build:
    name: Build Application
    runs-on: ubuntu-latest

    outputs:
      build-success: ${{ steps.build.outcome }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Install lefthook
        run: pnpm add -g lefthook

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run type check
        id: typecheck
        run: pnpm tsc --noEmit

      - name: Run linting
        id: lint
        run: pnpm lint:fix

      - name: Check formatting
        id: format
        run: pnpm format:check

      - name: Run build
        id: build
        run: pnpm build
        env:
          NODE_ENV: production
          DATABASE_URL: 'postgresql://test:test@localhost:5432/test?connect_timeout=10&statement_timeout=10'

  test:
    name: Run All Tests
    runs-on: ubuntu-latest
    needs: build
    if: needs.build.outputs.build-success == 'success'

    outputs:
      tests-success: ${{ steps.tests.outcome }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Install lefthook
        run: pnpm add -g lefthook

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run unit tests
        id: unit-tests
        run: pnpm test:run || pnpm test
        continue-on-error: false

      - name: Run integration tests
        id: integration-tests
        run: pnpm test:integration
        continue-on-error: false

      # E2E tests skipped in CI - run locally for comprehensive testing
      # Use: pnpm test:e2e for local E2E testing

      - name: Run security audit
        id: security-audit
        run: pnpm audit --audit-level moderate || echo "⚠️ Security audit completed with issues"

      - name: Mark tests as successful
        id: tests
        run: echo "All tests completed successfully"

  setup-matrix:
    name: Setup Build Matrix
    runs-on: ubuntu-latest
    needs: [build, test]
    if: |
      github.event_name == 'push' &&
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')) &&
      needs.build.outputs.build-success == 'success' &&
      needs.test.outputs.tests-success == 'success'

    outputs:
      variants: ${{ steps.generate-matrix.outputs.variants }}
      security-variants: ${{ steps.generate-matrix.outputs.security-variants }}

    steps:
      - name: Generate build matrix
        id: generate-matrix
        run: |
          # Define all available variants
          ALL_VARIANTS='{"cpu": {"name": "cpu", "file": "docker/Dockerfile.cpu", "platforms": "linux/amd64,linux/arm64"}, "nvidia": {"name": "nvidia", "file": "docker/Dockerfile.nvidia", "platforms": "linux/amd64"}, "amd": {"name": "amd", "file": "docker/Dockerfile.amd", "platforms": "linux/amd64"}, "intel": {"name": "intel", "file": "docker/Dockerfile.intel", "platforms": "linux/amd64"}}'

          # Get variants to build from environment variable
          BUILD_VARIANTS="${{ env.BUILD_VARIANTS }}"
          echo "BUILD_VARIANTS: $BUILD_VARIANTS"

          # Convert comma-separated string to JSON array
          if [ "$BUILD_VARIANTS" = "all" ] || [ -z "$BUILD_VARIANTS" ]; then
            VARIANTS_TO_BUILD="cpu,nvidia,amd,intel"
          else
            VARIANTS_TO_BUILD="$BUILD_VARIANTS"
          fi

          # Generate the matrix JSON
          VARIANTS_JSON="["
          SECURITY_VARIANTS_JSON="["
          FIRST=true

          IFS=',' read -ra VARIANTS <<< "$VARIANTS_TO_BUILD"
          for variant in "${VARIANTS[@]}"; do
            variant=$(echo "$variant" | xargs) # trim whitespace

            case $variant in
              "cpu")
                VARIANT_JSON='{"name": "cpu", "file": "docker/Dockerfile.cpu", "platforms": "linux/amd64,linux/arm64"}'
                ;;
              "nvidia")
                VARIANT_JSON='{"name": "nvidia", "file": "docker/Dockerfile.nvidia", "platforms": "linux/amd64"}'
                ;;
              "amd")
                VARIANT_JSON='{"name": "amd", "file": "docker/Dockerfile.amd", "platforms": "linux/amd64"}'
                ;;
              "intel")
                VARIANT_JSON='{"name": "intel", "file": "docker/Dockerfile.intel", "platforms": "linux/amd64"}'
                ;;
              *)
                echo "Unknown variant: $variant, skipping..."
                continue
                ;;
            esac

            if [ "$FIRST" = true ]; then
              FIRST=false
            else
              VARIANTS_JSON="$VARIANTS_JSON,"
              SECURITY_VARIANTS_JSON="$SECURITY_VARIANTS_JSON,"
            fi

            VARIANTS_JSON="$VARIANTS_JSON$VARIANT_JSON"
            SECURITY_VARIANTS_JSON="$SECURITY_VARIANTS_JSON{\"name\": \"$variant\"}"
          done

          VARIANTS_JSON="$VARIANTS_JSON]"
          SECURITY_VARIANTS_JSON="$SECURITY_VARIANTS_JSON]"

          echo "Generated variants matrix: $VARIANTS_JSON"
          echo "variants=$VARIANTS_JSON" >> $GITHUB_OUTPUT
          echo "security-variants=$SECURITY_VARIANTS_JSON" >> $GITHUB_OUTPUT

  deploy:
    name: Build and Deploy Docker Images
    runs-on: ubuntu-latest
    needs: [build, test, setup-matrix]
    if: |
      github.event_name == 'push' &&
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')) &&
      needs.build.outputs.build-success == 'success' &&
      needs.test.outputs.tests-success == 'success'

    strategy:
      matrix:
        variant: ${{ fromJson(needs.setup-matrix.outputs.variants) }}

    outputs:
      image-tag: ${{ steps.meta.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch,suffix=-${{ matrix.variant.name }}
            type=ref,event=pr,suffix=-${{ matrix.variant.name }}
            type=semver,pattern={{version}},suffix=-${{ matrix.variant.name }}
            type=semver,pattern={{major}}.{{minor}},suffix=-${{ matrix.variant.name }}
            type=semver,pattern={{major}},suffix=-${{ matrix.variant.name }}
            type=sha,suffix=-${{ matrix.variant.name }}
            type=raw,value=latest-${{ matrix.variant.name }},enable={{is_default_branch}}

      - name: Build and push Docker image (${{ matrix.variant.name }})
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.variant.file }}
          platforms: ${{ matrix.variant.platforms }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          format: spdx-json
          output-file: sbom-${{ matrix.variant.name }}.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ matrix.variant.name }}-${{ steps.meta.outputs.version }}
          path: sbom-${{ matrix.variant.name }}.spdx.json
          retention-days: 30

  create-default-tags:
    name: Create Default Tags
    runs-on: ubuntu-latest
    needs: deploy
    if: |
      github.event_name == 'push' &&
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')) &&
      needs.deploy.result == 'success'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata for default tags
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Create CPU variant as default tags
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile.cpu
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            NODE_ENV=production

  security-scan:
    name: Security Scan (${{ matrix.variant.name }})
    runs-on: ubuntu-latest
    needs: deploy
    if: |
      github.event_name == 'push' &&
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')) &&
      needs.deploy.result == 'success'

    strategy:
      matrix:
        variant: ${{ fromJson(needs.setup-matrix.outputs.security-variants) }}

    steps:
      - name: Run Trivy vulnerability scanner (${{ matrix.variant.name }})
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest-${{ matrix.variant.name }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.variant.name }}.sarif'

      - name: Upload Trivy scan results to GitHub Security tab (${{ matrix.variant.name }})
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.variant.name }}.sarif'
