name: Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '10.4.1'

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.changes.outputs.should-deploy }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for changes
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            packages:
              - 'packages/**'
              - 'turbo.json'
              - 'pnpm-lock.yaml'
            api:
              - 'apps/api/**'
            web:
              - 'apps/web/**'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests
        run: pnpm test:ci
        env:
          NODE_ENV: test

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level moderate

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  deploy-api:
    name: Deploy API
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: needs.build-and-test.outputs.should-deploy == 'true' || github.event_name == 'workflow_dispatch'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build API
        run: pnpm build --filter @autopwn/api
        env:
          NODE_ENV: production

      - name: Build Docker image
        run: |
          docker build -t autopwn-api:${{ github.sha }} -f Dockerfile .
          docker tag autopwn-api:${{ github.sha }} autopwn-api:latest

      - name: Log in to registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push to registry
        run: |
          docker push ghcr.io/${{ github.repository }}/autopwn-api:${{ github.sha }}
          docker push ghcr.io/${{ github.repository }}/autopwn-api:latest

      - name: Deploy to production
        run: |
          echo "Deploying API to production..."
          # Add your deployment commands here
          # For example: kubectl apply -f k8s/api-deployment.yaml

  deploy-web:
    name: Deploy Web App
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: needs.build-and-test.outputs.should-deploy == 'true' || github.event_name == 'workflow_dispatch'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build web app
        run: pnpm build --filter web
        env:
          NODE_ENV: production
          NEXT_PUBLIC_API_URL: ${{ secrets.API_URL }}

      - name: Build Docker image
        run: |
          docker build -t autopwn-web:${{ github.sha }} -f apps/web/Dockerfile .
          docker tag autopwn-web:${{ github.sha }} autopwn-web:latest

      - name: Log in to registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push to registry
        run: |
          docker push ghcr.io/${{ github.repository }}/autopwn-web:${{ github.sha }}
          docker push ghcr.io/${{ github.repository }}/autopwn-web:latest

      - name: Deploy to production
        run: |
          echo "Deploying web app to production..."
          # Add your deployment commands here
          # For example: kubectl apply -f k8s/web-deployment.yaml

  health-check:
    name: Post-Deploy Health Check
    runs-on: ubuntu-latest
    needs: [deploy-api, deploy-web]
    if: always() && needs.deploy-api.result == 'success' || needs.deploy-web.result == 'success'
    steps:
      - name: Health Check API
        run: |
          echo "Checking API health..."
          timeout 300 bash -c 'until curl -f ${{ secrets.API_URL }}/health; do sleep 10; done'

      - name: Health Check Web App
        run: |
          echo "Checking web app health..."
          timeout 300 bash -c 'until curl -f ${{ secrets.WEB_URL }}; do sleep 10; done'

      - name: Notify deployment status
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Deployment Health Check Failed',
              body: 'The deployment health check failed. Please investigate the issue.',
              labels: ['deployment', 'health-check']
            })