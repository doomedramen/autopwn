# AutoPWN Dockerfile for CI/CD Pipeline
# Optimized for continuous integration environments

# Base image with CI-specific tools
FROM node:20-alpine AS base
RUN apk add --no-cache \
    curl \
    dumb-init \
    postgresql-client \
    redis \
    # Build tools
    make \
    g++ \
    python3 \
    py3-pip

# Install pnpm globally
RUN npm install -g pnpm@10.4.1

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json pnpm-lock.yaml* ./
COPY packages/ui/package*.json ./packages/ui/
COPY packages/eslint-config/package*.json ./packages/eslint-config/
COPY packages/typescript-config/package*.json ./packages/typescript-config/
COPY apps/api/package*.json ./apps/api/

# Install dependencies (including dev dependencies for testing)
RUN pnpm install --frozen-lockfile --prefer-frozen-lockfile

# CI target
FROM base AS ci
ENV NODE_ENV=ci

# Copy source code
COPY . .

# Build workspace packages
RUN pnpm build

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S ciuser -u 1001

# Create required directories
RUN mkdir -p /app/uploads /app/coverage /app/test-results && \
    chown -R ciuser:nodejs /app

# Switch to non-root user
USER ciuser

# CI environment variables
ENV CI=true
NODE_ENV=ci

# CI test runner script
RUN echo '#!/bin/sh' > /app/run-ci-tests.sh && \
    echo 'set -e' >> /app/run-ci-tests.sh && \
    echo 'echo "Starting CI pipeline..."' >> /app/run-ci-tests.sh && \
    echo 'echo "Running unit tests..."' >> /app/run-ci-tests.sh && \
    echo 'pnpm test:unit' >> /app/run-ci-tests.sh && \
    echo 'echo "Running integration tests..."' >> /app/run-ci-tests.sh && \
    echo 'pnpm test:integration' >> /app/run-ci-tests.sh && \
    echo 'echo "CI pipeline completed successfully."' >> /app/run-ci-tests.sh && \
    chmod +x /app/run-ci-tests.sh

# Default CI command
CMD ["/app/run-ci-tests.sh"]