# AutoPWN Dockerfile for Web Frontend
# Supports development, test, and production builds

# Base stage with pnpm
FROM node:20-alpine AS base
# Install pnpm globally
RUN npm install -g pnpm@10.4.1

# Set working directory
WORKDIR /app

# Development target
FROM base AS development
ENV NODE_ENV=development

# Copy all package files first for better Docker layer caching
COPY package*.json pnpm-lock.yaml* ./
COPY packages/ui/package*.json ./packages/ui/
COPY packages/eslint-config/package*.json ./packages/eslint-config/
COPY packages/typescript-config/package*.json ./packages/typescript-config/
COPY apps/web/package*.json ./apps/web/
COPY apps/api/package*.json ./apps/api/
COPY turbo.json ./

# Install all dependencies (including devDependencies for development)
RUN pnpm install --frozen-lockfile

# Copy source code and skip build (use pre-built)
COPY apps/web/src ./apps/web/src
COPY apps/web/public ./apps/web/public
COPY packages ./packages


# Skip build to avoid Next.js dependency issues in Docker
# Build entire workspace first - DISABLED
# RUN pnpm run build

# Then specifically build web application - DISABLED
# RUN pnpm run build --filter=web

# Create non-root user and cache directory with proper permissions
RUN addgroup -g 1001 -S nodejs && \
    adduser -S webuser -u 1001 && \
    mkdir -p /app/.turbo/cache && \
    chown -R webuser:nodejs /app

# Set working directory to web app
WORKDIR /app/apps/web

# Copy node_modules from API service which has dependencies installed
COPY --from=development /app/apps/api/node_modules ./apps/api/node_modules

# Switch to non-root user
USER webuser

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:3000 || exit 1

# Start development server using system PATH
CMD ["next", "dev"]
