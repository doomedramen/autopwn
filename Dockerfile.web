# AutoPWN Dockerfile for Web Frontend
# Supports development, test, and production builds

# Build base image with all dependencies
FROM node:20-alpine AS base
RUN apk add --no-cache \
    curl \
    dumb-init

# Install pnpm globally
RUN npm install -g pnpm@10.4.1

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json pnpm-lock.yaml* ./
COPY packages/ui/package*.json ./packages/ui/
COPY packages/eslint-config/package*.json ./packages/eslint-config/
COPY packages/typescript-config/package*.json ./packages/typescript-config/
COPY apps/web/package*.json ./apps/web/

# Install dependencies
RUN pnpm install --frozen-lockfile --prefer-frozen-lockfile

# Development target
FROM base AS development
ENV NODE_ENV=development

# Copy source code for hot-reloading
COPY . .

# Build workspace packages first
RUN pnpm build

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S webuser -u 1001

# Switch to non-root user
USER webuser

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:3000 || exit 1

# Start development server with dumb-init
ENTRYPOINT ["dumb-init", "--"]
CMD ["pnpm", "dev"]

# Test target
FROM development AS test
ENV NODE_ENV=test

# Install test-specific dependencies
RUN apk add --no-cache \
    chromium \
    nss \
    freetype \
    freetype-dev \
    harfbuzz \
    ca-certificates \
    ttf-freefont

# Set Puppeteer to use installed Chromium
ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true \
    PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium-browser

# Build for testing
RUN pnpm build

# Switch to root for test setup
USER root

# Ensure proper permissions for test files
RUN mkdir -p /app/test-results && \
    chown -R webuser:nodejs /app

USER webuser

# Default test command (can be overridden)
CMD ["tail", "-f", "/dev/null"]

# CI target for continuous integration
FROM test AS ci
ENV NODE_ENV=ci

# Additional CI-specific setup
RUN pnpm run build

# Production build target
FROM base AS production
ENV NODE_ENV=production

# Copy built application from development stage
COPY --from=development /app/packages ./packages
COPY --from=development /app/apps/web/.next ./apps/web/.next
COPY --from=development /app/apps/web/public ./apps/web/public
COPY --from=development /app/apps/web/next.config.* ./apps/web/
COPY --from=development /app/apps/web/package.json ./apps/web/

# Install only production dependencies
RUN pnpm install --frozen-lockfile --prod --filter=web...

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S webuser -u 1001

# Switch to non-root user
USER webuser

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:3000 || exit 1

# Start production server with dumb-init
ENTRYPOINT ["dumb-init", "--"]
CMD ["pnpm", "start"]