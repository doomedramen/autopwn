# AutoPWN Docker Compose Configuration for CI/CD
# This file provides optimized services for continuous integration environments

x-app-environment: &app-environment
  NODE_ENV: test
  PORT: 3001

  # CI database configuration
  DATABASE_URL: postgresql://postgres:password@database:5432/autopwn_ci

  # CI Redis configuration
  REDIS_URL: redis://redis:6379
  REDIS_HOST: redis
  REDIS_PORT: 6379

  # CI authentication secrets (from CI environment variables)
  AUTH_SECRET: ${AUTH_SECRET}
  AUTH_URL: http://localhost:3001/auth
  JWT_SECRET: ${JWT_SECRET}

  # CI file upload settings
  UPLOAD_DIR: ./uploads
  MAX_FILE_SIZE: 100MB

  # CI background job settings
  DEFAULT_JOB_TIMEOUT: 300000
  MAX_CONCURRENT_JOBS: 5

  # CI security settings
  CORS_ORIGIN: http://localhost:3000
  RATE_LIMIT_WINDOW: 900000
  RATE_LIMIT_MAX: 100

  # CI-specific environment variables
  TEST_WITH_REAL_TOOLS: ${TEST_WITH_REAL_TOOLS:-false}
  HASHCAT_PATH: ${HASHCAT_PATH:-}
  HCX_PCAPNGTOOL_PATH: ${HCX_PCAPNGTOOL_PATH:-}
  CI: true

services:
  # PostgreSQL CI Database
  database:
    image: postgres:16-alpine
    container_name: autopwn-db-ci
    environment:
      POSTGRES_DB: autopwn_ci
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8"
    tmpfs:
      - /var/lib/postgresql/data # Use tmpfs for performance in CI
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 3s
      timeout: 3s
      retries: 10
      start_period: 10s
    networks:
      - autopwn-ci-network

  # Redis CI Instance
  redis:
    image: redis:7-alpine
    container_name: autopwn-redis-ci
    command: redis-server --save "" --appendonly no
    tmpfs:
      - /data # Use tmpfs for performance in CI
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 3s
      timeout: 3s
      retries: 10
      start_period: 5s
    networks:
      - autopwn-ci-network

  # CI Test Runner
  test-runner:
    build:
      context: .
      dockerfile: Dockerfile.ci
    container_name: autopwn-ci-runner
    environment:
      <<: *app-environment
    volumes:
      - ./apps/api:/app/apps/api
      - ./packages:/app/packages
      - ci_uploads:/app/uploads
      - ci_coverage:/app/coverage
      - ci_test_results:/app/test-results
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    # Run unit and integration tests (no Docker-in-Docker needed)
    command: ["sh", "-c", "pnpm test:unit && pnpm --filter @autopwn/api test:integration:real"]
    networks:
      - autopwn-ci-network

  # CI Database Migration
  ci-db-migrate:
    build:
      context: .
      dockerfile: Dockerfile.ci
    container_name: autopwn-ci-db-migrate
    environment:
      <<: *app-environment
    volumes:
      - ./apps/api:/app/apps/api
      - ./packages:/app/packages
    depends_on:
      database:
        condition: service_healthy
    command: ["pnpm", "test:migrate"]
    networks:
      - autopwn-ci-network
    profiles:
      - ci-setup

  # CI Unit Tests
  ci-unit-tests:
    build:
      context: .
      dockerfile: Dockerfile.ci
    container_name: autopwn-ci-unit-tests
    environment:
      <<: *app-environment
    volumes:
      - ./apps/api:/app/apps/api
      - ./packages:/app/packages
      - ci_coverage:/app/coverage
      - ci_test_results:/app/test-results
    command: ["pnpm", "test:unit"]
    networks:
      - autopwn-ci-network
    profiles:
      - unit-tests

  # CI Integration Tests
  ci-integration-tests:
    build:
      context: .
      dockerfile: Dockerfile.ci
    container_name: autopwn-ci-integration-tests
    environment:
      <<: *app-environment
    volumes:
      - ./apps/api:/app/apps/api
      - ./packages:/app/packages
      - ci_uploads:/app/uploads
      - ci_test_results:/app/test-results
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["pnpm", "test:integration"]
    networks:
      - autopwn-ci-network
    profiles:
      - integration-tests

  # CI Performance Tests
  ci-performance-tests:
    build:
      context: .
      dockerfile: Dockerfile.ci
    container_name: autopwn-ci-performance-tests
    environment:
      <<: *app-environment
    volumes:
      - ./apps/api:/app/apps/api
      - ./packages:/app/packages
      - ci_test_results:/app/test-results
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["pnpm", "test:performance"]
    networks:
      - autopwn-ci-network
    profiles:
      - performance-tests

  # CI E2E Tests
  ci-e2e-tests:
    build:
      context: .
      dockerfile: Dockerfile.e2e
    container_name: autopwn-ci-e2e-tests
    environment:
      NODE_ENV: test
      BASE_URL: http://web:3000
      API_URL: http://api:3001
      E2E_ADMIN_EMAIL: ${E2E_ADMIN_EMAIL}
      E2E_ADMIN_PASSWORD: ${E2E_ADMIN_PASSWORD}
      CI: true
    volumes:
      - ./apps/web:/app/apps/web
      - ./packages:/app/packages
      - ci_test_results:/app/test-results
      - /dev/shm:/dev/shm  # Required for Chromium
    depends_on:
      - api
      - web
    command: ["pnpm", "test:e2e:chromium"]
    networks:
      - autopwn-ci-network
    profiles:
      - e2e-tests

  # API Service for E2E Tests
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: ci
    container_name: autopwn-api-ci
    environment:
      <<: *app-environment
    volumes:
      - ./apps/api:/app/apps/api
      - ./packages:/app/packages
      - ci_uploads:/app/uploads
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - autopwn-ci-network
    profiles:
      - e2e-tests

  # Web Frontend for E2E Tests
  web:
    build:
      context: .
      dockerfile: Dockerfile.web
      target: ci
    container_name: autopwn-web-ci
    environment:
      NODE_ENV: test
      NEXT_PUBLIC_API_URL: http://localhost:3001
      NEXT_PUBLIC_APP_URL: http://localhost:3000
    volumes:
      - ./apps/web:/app/apps/web
      - ./packages:/app/packages
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - autopwn-ci-network
    profiles:
      - e2e-tests

volumes:
  ci_uploads:
    driver: local
  ci_coverage:
    driver: local
  ci_test_results:
    driver: local

networks:
  autopwn-ci-network:
    driver: bridge