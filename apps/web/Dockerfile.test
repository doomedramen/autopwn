FROM node:24-alpine

# Install pnpm
RUN corepack enable

# Install all dependencies required for testing
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    git \
    # Playwright browser dependencies (Alpine Linux package names)
    ffmpeg \
    nss \
    at-spi2-core \
    gtk+3.0-dev \
    libdrm-dev \
    libxkbcommon-dev \
    libxcomposite-dev \
    libxdamage-dev \
    libxrandr-dev \
    mesa-gbm-dev \
    libxss-dev \
    alsa-lib-dev

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY pnpm-lock.yaml ./
COPY pnpm-workspace.yaml ./
COPY packages/shared/package*.json ./packages/shared/
COPY apps/web/package*.json ./apps/web/

# Initialize git repository for lefthook
RUN git init && git config user.email "test@example.com" && git config user.name "Test User"

# Install dependencies including Playwright
RUN pnpm install --frozen-lockfile

# Install Playwright browsers
RUN npx playwright install chromium firefox webkit
RUN npx playwright install-deps

# Copy source code
COPY packages/shared ./packages/shared
COPY apps/web ./apps/web

# Build shared package
WORKDIR /app/packages/shared
RUN pnpm run build

# Build web application
WORKDIR /app/apps/web
RUN pnpm run build

# Create test user script for setup
COPY <<EOF /app/apps/web/setup-test-user.js
const { PrismaClient } = require('@prisma/client');
const { betterAuth } = require('better-auth');
const bcrypt = require('bcryptjs');

async function setupTestUser() {
  const prisma = new PrismaClient();

  try {
    // Check if test user already exists
    const existingUser = await prisma.user.findUnique({
      where: { email: 'test@example.com' }
    });

    if (!existingUser) {
      // Create test user
      const hashedPassword = await bcrypt.hash('testpassword123', 12);

      await prisma.user.create({
        data: {
          email: 'test@example.com',
          name: 'Test User',
          password: hashedPassword,
        }
      });

      console.log('Test user created successfully');
    } else {
      console.log('Test user already exists');
    }
  } catch (error) {
    console.error('Error setting up test user:', error);
  } finally {
    await prisma.$disconnect();
  }
}

setupTestUser();
EOF

# Create script for running tests with database setup
COPY <<EOF /app/apps/web/run-tests.sh
#!/bin/sh

# Wait for database to be ready (if using external DB)
if [ !z "\$DATABASE_URL" ]; then
  echo "Waiting for database..."
  # Add database waiting logic here if needed
fi

# Setup test data
echo "Setting up test data..."
node setup-test-user.js

# Run tests
echo "Running E2E tests..."
exec "\$@"
EOF

RUN chmod +x /app/apps/web/run-tests.sh

EXPOSE 3000

# Default command starts the app for manual testing
CMD ["./run-tests.sh", "pnpm", "dev"]