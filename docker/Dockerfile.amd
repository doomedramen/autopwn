# AutoPWN - AMD GPU Optimized Variant (ROCm)
FROM ubuntu:22.04 AS base

# Set environment variables to avoid interactive prompts
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=Etc/UTC

# Install Node.js
RUN apt-get update && apt-get install -y \
    curl \
    gnupg \
    ca-certificates \
    software-properties-common \
    wget \
    && curl -fsSL https://deb.nodesource.com/setup_20.x | bash - \
    && apt-get install -y nodejs npm \
    && rm -rf /var/lib/apt/lists/*

# Install ROCm repository and AMD GPU support
RUN wget -qO - https://repo.radeon.com/rocm/rocm.gpg.key | apt-key add - \
    && echo "deb [arch=amd64] https://repo.radeon.com/rocm/apt/22.04 main" | tee /etc/apt/sources.list.d/rocm.list \
    && apt-get update

# Install dependencies only when needed
FROM base AS deps
# Install basic dependencies
RUN apt-get update && apt-get install -y \
    git \
    postgresql-client \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Install dependencies based on the preferred package manager
COPY package.json pnpm-lock.yaml* ./
RUN \
  if [ -f pnpm-lock.yaml ]; then \
    corepack enable pnpm && pnpm i --frozen-lockfile; \
  elif [ -f package-lock.json ]; then \
    npm ci; \
  elif [ -f yarn.lock ]; then \
    corepack enable yarn && yarn install --frozen-lockfile; \
  else \
    echo "Lockfile not found." && exit 1; \
  fi

# Build stage
FROM base AS builder
WORKDIR /app

COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Build arguments
ARG NODE_ENV=production
ARG NEXT_PUBLIC_APP_URL=http://localhost:3000
ARG BETTER_AUTH_SECRET=github-action-build-secret-32-chars-long
ARG BETTER_AUTH_URL=http://localhost:3000
ARG DATABASE_URL=postgresql://test:test@localhost:5432/test

# Environment variables for build
ENV NODE_ENV=${NODE_ENV}
ENV NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL}
ENV BETTER_AUTH_SECRET=${BETTER_AUTH_SECRET}
ENV BETTER_AUTH_URL=${BETTER_AUTH_URL}
ENV DATABASE_URL=${DATABASE_URL}
ENV NEXT_TELEMETRY_DISABLED=1

RUN \
  if [ -f pnpm-lock.yaml ]; then \
    corepack enable pnpm && pnpm run build; \
  elif [ -f package-lock.json ]; then \
    npm run build; \
  elif [ -f yarn.lock ]; then \
    corepack enable yarn && yarn build; \
  else \
    echo "Lockfile not found." && exit 1; \
  fi

# Production image, copy all the files and run next
FROM base AS runner
WORKDIR /app

ENV NODE_ENV=production
ENV DEBIAN_FRONTEND=noninteractive
ENV NEXT_TELEMETRY_DISABLED=1

# Install runtime dependencies and AMD GPU support
RUN apt-get update && apt-get install -y \
    postgresql-client \
    sudo \
    hcxtools \
    hashcat \
    rocm-dkms \
    libopencl-1 \
    libopencl-dev \
    clinfo \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Verify ROCm and OpenCL support
RUN clinfo | grep -i "AMD\|Radeon" || (echo "AMD GPU not detected or ROCm not properly installed" && exit 1)

# Create user with sudo access
RUN useradd -m -u 1001 nextjs \
    && echo "nextjs ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers

# Copy package files and pnpm
COPY --from=deps /app/package.json ./package.json
COPY --from=deps /app/pnpm-lock.yaml* ./
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /usr/local/bin/pnpm /usr/local/bin/pnpm

# Copy entrypoint script
COPY --from=builder /app/docker/docker-entrypoint.sh ./docker/docker-entrypoint.sh

# Copy drizzle config for migrations
COPY --from=builder /app/drizzle.config.ts ./drizzle.config.ts

# Copy drizzle migration files
COPY --from=builder /app/src/lib/db/migrations ./src/lib/db/migrations

COPY --from=builder /app/public ./public

# Create and set permissions for uploads and jobs directories
RUN mkdir -p /app/uploads/pcap /app/uploads/dictionary /app/uploads/general /app/jobs
RUN chown -R nextjs:nextjs /app/uploads /app/jobs

# Set the correct permission for prerender cache
RUN mkdir .next
RUN chown nextjs:nextjs .next

# Automatically leverage output traces to reduce image size
# https://nextjs.org/docs/advanced-features/output-file-tracing
COPY --from=builder --chown=nextjs:nextjs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nextjs /app/.next/static ./.next/static

# Make entrypoint script executable
RUN chmod +x docker-entrypoint.sh

USER nextjs

EXPOSE 3000

ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

# Use the entrypoint script that runs migrations before starting the app
ENTRYPOINT ["./docker/docker-entrypoint.sh"]

# server.js is created by next build from the standalone output
# https://nextjs.org/docs/pages/api-reference/next-config-js/output
CMD ["node", "server.js"]