# AutoPWN Dockerfile for Test Environments
# Optimized for running tests in containers

# Base image with testing tools
FROM node:20-alpine AS base
RUN apk add --no-cache \
    curl \
    dumb-init \
    postgresql-client \
    redis \
    # Testing tools
    chromium \
    nss \
    freetype \
    freetype-dev \
    harfbuzz \
    ca-certificates \
    ttf-freefont \
    # Security analysis tools
    tcpdump \
    wireshark-cli \
    nmap \
    # Build tools
    make \
    g++

# Install pnpm globally
RUN npm install -g pnpm@10.4.1

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json pnpm-lock.yaml* ./
COPY packages/ui/package*.json ./packages/ui/
COPY packages/eslint-config/package*.json ./packages/eslint-config/
COPY packages/typescript-config/package*.json ./packages/typescript-config/
COPY apps/api/package*.json ./apps/api/

# Install all dependencies (including dev dependencies for testing)
RUN pnpm install --frozen-lockfile --prefer-frozen-lockfile

# Development test target
FROM base AS development
ENV NODE_ENV=development

# Copy source code
COPY . .

# Build workspace packages
RUN pnpm build

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S testuser -u 1001

# Create required directories
RUN mkdir -p /app/uploads /app/test-results && \
    chown -R testuser:nodejs /app

# Switch to non-root user
USER testuser

# Set Puppeteer to use installed Chromium
ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true \
    PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium-browser

# Default command keeps container running for manual test execution
CMD ["tail", "-f", "/dev/null"]

# Integration test target
FROM development AS integration-test
ENV NODE_ENV=test

# Additional integration test setup
RUN mkdir -p /app/test-results/integration

# Test runner script
RUN echo '#!/bin/sh' > /app/run-tests.sh && \
    echo 'set -e' >> /app/run-tests.sh && \
    echo 'echo "Starting integration tests..."' >> /app/run-tests.sh && \
    echo 'pnpm test:integration' >> /app/run-tests.sh && \
    echo 'echo "Integration tests completed."' >> /app/run-tests.sh && \
    chmod +x /app/run-tests.sh

CMD ["/app/run-tests.sh"]

# Unit test target
FROM development AS unit-test
ENV NODE_ENV=test

# Unit test setup
RUN mkdir -p /app/test-results/unit

# Unit test runner script
RUN echo '#!/bin/sh' > /app/run-unit-tests.sh && \
    echo 'set -e' >> /app/run-unit-tests.sh && \
    echo 'echo "Starting unit tests..."' >> /app/run-unit-tests.sh && \
    echo 'pnpm test:unit' >> /app/run-unit-tests.sh && \
    echo 'echo "Unit tests completed."' >> /app/run-unit-tests.sh && \
    chmod +x /app/run-unit-tests.sh

CMD ["/app/run-unit-tests.sh"]

# Performance test target
FROM development AS performance-test
ENV NODE_ENV=test

# Performance test setup
RUN mkdir -p /app/test-results/performance

# Performance test runner script
RUN echo '#!/bin/sh' > /app/run-performance-tests.sh && \
    echo 'set -e' >> /app/run-performance-tests.sh && \
    echo 'echo "Starting performance tests..."' >> /app/run-performance-tests.sh && \
    echo 'pnpm test:performance' >> /app/run-performance-tests.sh && \
    echo 'echo "Performance tests completed."' >> /app/run-performance-tests.sh && \
    chmod +x /app/run-performance-tests.sh

CMD ["/app/run-performance-tests.sh"]