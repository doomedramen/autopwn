# AutoPWN Production Docker Compose Configuration
# Optimized for production deployment with security and performance best practices

x-app-environment: &app-environment
  NODE_ENV: production
  PORT: 3001

  # Database configuration (use secrets in production)
  DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@database:5432/${POSTGRES_DB}

  # Redis configuration
  REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
  REDIS_HOST: redis
  REDIS_PORT: 6379
  REDIS_PASSWORD: ${REDIS_PASSWORD}

  # Authentication secrets (MUST be set via environment variables in production)
  AUTH_SECRET: ${AUTH_SECRET:-}
  AUTH_URL: ${AUTH_URL:-https://api.autopwn.local/auth}
  JWT_SECRET: ${JWT_SECRET:-}

  # File upload settings
  UPLOAD_DIR: /app/data/uploads
  MAX_FILE_SIZE: 100MB

  # Frontend URL
  FRONTEND_URL: ${FRONTEND_URL:-https://autopwn.local}

  # Background job settings
  DEFAULT_JOB_TIMEOUT: 300000
  MAX_CONCURRENT_JOBS: ${MAX_CONCURRENT_JOBS:-3}

  # Security settings
  CORS_ORIGIN: ${CORS_ORIGIN:-https://autopwn.local}
  RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW:-900000}
  RATE_LIMIT_MAX: ${RATE_LIMIT_MAX:-100}

  # Email configuration (for verification)
  SMTP_HOST: ${SMTP_HOST}
  SMTP_PORT: ${SMTP_PORT:-587}
  SMTP_USER: ${SMTP_USER}
  SMTP_PASS: ${SMTP_PASS}
  SMTP_FROM: ${SMTP_FROM:-noreply@autopwn.local}

x-web-environment: &web-environment
  NODE_ENV: production
  NEXT_PUBLIC_API_URL: ${API_URL:-https://api.autopwn.local}
  NEXT_PUBLIC_APP_URL: ${FRONTEND_URL:-https://autopwn.local}

x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"
    labels: "service,environment"

x-restart-policy: &default-restart
  restart: unless-stopped

x-resource-limits: &default-resources
  limits:
    cpus: '1.0'
    memory: 1G
  reservations:
    cpus: '0.25'
    memory: 256M

services:
  # PostgreSQL Database (Production)
  database:
    image: postgres:16-alpine
    container_name: autopwn-db-prod
    <<: *default-restart
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-autopwn}
      POSTGRES_USER: ${POSTGRES_USER:-autopwn}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
      # Security settings
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
      POSTGRES_INITDB_WALDIR: /var/lib/postgresql/wal
    ports:
      - "127.0.0.1:5432:5432"  # Bind to localhost only
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_wal:/var/lib/postgresql/wal
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
      - ./backups/postgres:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-autopwn}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    networks:
      - autopwn-backend
    security_opt:
      - no-new-privileges:true
    read_only: false  # PostgreSQL needs write access
    tmpfs:
      - /tmp
      - /run/postgresql

  # Redis for caching and job queues (Production)
  # IMPORTANT: Set REDIS_PASSWORD environment variable for production security
  # Without it, Redis will run WITHOUT password protection (insecure!)
  redis:
    image: redis:7-alpine
    container_name: autopwn-redis-prod
    <<: *default-restart
    ports:
      - "127.0.0.1:6379:6379"  # Bind to localhost only
    volumes:
      - redis_data:/data
      - ./config/redis-prod.conf:/usr/local/etc/redis/redis.conf:ro
    command: >
      sh -c 'if [ -n "$REDIS_PASSWORD" ]; then
        echo "Starting Redis with password protection...";
        redis-server /usr/local/etc/redis/redis.conf
        --requirepass "$REDIS_PASSWORD"
        --maxmemory 512mb
        --maxmemory-policy allkeys-lru
        --appendonly yes
        --appendfsync everysec;
      else
        echo "========================================";
        echo "WARNING: REDIS_PASSWORD not set!";
        echo "Redis running WITHOUT password protection!";
        echo "This is INSECURE for production use.";
        echo "Set REDIS_PASSWORD in .env.production";
        echo "========================================";
        redis-server /usr/local/etc/redis/redis.conf
        --maxmemory 512mb
        --maxmemory-policy allkeys-lru
        --appendonly yes
        --appendfsync everysec;
      fi'
    healthcheck:
      test: ["CMD", "sh", "-c", "redis-cli ${REDIS_PASSWORD:+-a \"$REDIS_PASSWORD\"} ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 768M
        reservations:
          cpus: '0.25'
          memory: 256M
    networks:
      - autopwn-backend
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp

  # API Service (Production)
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        NODE_ENV: production
      cache_from:
        - autopwn-api:latest
    image: autopwn-api:${VERSION:-latest}
    container_name: autopwn-api-prod
    <<: *default-restart
    environment:
      <<: *app-environment
    ports:
      - "127.0.0.1:3001:3001"  # Bind to localhost only (use reverse proxy)
    volumes:
      - uploads_data:/app/data/uploads:rw
      - app_logs:/app/logs:rw
      - temp_data:/app/temp:rw
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging: *default-logging
    deploy:
      resources: *default-resources
      replicas: 1
    networks:
      - autopwn-backend
      - autopwn-frontend
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /app/.cache

  # Worker Service (Background jobs - Production)
  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: autopwn-api:${VERSION:-latest}
    container_name: autopwn-worker-prod
    <<: *default-restart
    environment:
      <<: *app-environment
    command: ["node", "apps/api/dist/workers/index.js"]
    volumes:
      - uploads_data:/app/data/uploads:ro
      - temp_data:/app/temp:rw
      - app_logs:/app/logs:rw
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('./apps/api/dist/workers/health-check.js')"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    networks:
      - autopwn-backend
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /app/.cache

  # Web Frontend (Production)
  web:
    build:
      context: .
      dockerfile: Dockerfile.web
      target: production
      args:
        NODE_ENV: production
        NEXT_PUBLIC_API_URL: ${API_URL:-https://api.autopwn.local}
      cache_from:
        - autopwn-web:latest
    image: autopwn-web:${VERSION:-latest}
    container_name: autopwn-web-prod
    <<: *default-restart
    environment:
      <<: *web-environment
    ports:
      - "127.0.0.1:3000:3000"  # Bind to localhost only (use reverse proxy)
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    logging: *default-logging
    deploy:
      resources: *default-resources
    networks:
      - autopwn-frontend
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /app/.next/cache

  # Nginx Reverse Proxy (Optional but recommended)
  nginx:
    image: nginx:alpine
    container_name: autopwn-nginx-prod
    <<: *default-restart
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
      - nginx_logs:/var/log/nginx
    depends_on:
      - api
      - web
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    networks:
      - autopwn-frontend
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /var/run
      - /var/cache/nginx
      - /var/log/nginx
    profiles:
      - with-proxy

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/postgres
  postgres_wal:
    driver: local
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/redis
  uploads_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/uploads
  app_logs:
    driver: local
  temp_data:
    driver: local
  nginx_cache:
    driver: local
  nginx_logs:
    driver: local

networks:
  autopwn-backend:
    driver: bridge
    internal: true  # Backend network is internal only
  autopwn-frontend:
    driver: bridge

# Production Deployment Notes:
# 1. Create .env.production file with all required secrets
# 2. Run: docker-compose -f docker-compose.prod.yml --env-file .env.production up -d
# 3. Set up SSL certificates in ./nginx/ssl/
# 4. Configure backups for postgres_data and uploads_data volumes
# 5. Set up monitoring and alerting
# 6. Configure log rotation for application logs
